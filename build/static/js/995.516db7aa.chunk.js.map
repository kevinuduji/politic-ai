{"version":3,"file":"static/js/995.516db7aa.chunk.js","mappings":"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","sources":["DialogueGenerator.js"],"sourcesContent":["/**\n * Political Debate Generator\n *\n * This module creates debate conversations for political topics\n * with 3 rounds and 5 responses per round, using AI to create natural responses.\n */\n\nconst Cerebras = require(\"@cerebras/cerebras_cloud_sdk\");\n\n// System prompt - simple and clear for natural responses\nconst SYSTEM_PROMPT = `\nYou are a skilled political commentator engaging in thoughtful debate. \nPresent well-reasoned arguments while maintaining a respectful tone. \nRespond naturally to what your opponent says, and make each response unique and authentic.  \nUse clear, everyday language that educated adults can easily understand. Avoid jargon, overly complex words, or academic terminology.\nUse analogies, compelling arguments, and references to make your points relatable and understandable to a general audience. \nFocus on simple but powerful words and phrases that convey your message effectively.\nEnsure each response relates to the previous speaker's points, creating a natural flow of conversation. \nAt the end of each dialogue, pose a question challenging the other side's validity.\n`;\n\n// User prompt template from the attachment\nconst USER_PROMPT_TEMPLATE = `\nDebate the following political issue: [TOPIC]. \nYou will be assigned a side, either for or against the issue.\n`;\n\n// Debate structure: 3 rounds with 10 subrounds each (5 per debater)\n// Only 3 types of responses: opening, counter, closing\nconst DEBATE_STRUCTURE = [\n  {\n    roundNumber: 1,\n    title: \"Round 1\",\n    subrounds: [\n      { side: \"A\", type: \"opening\", description: \"Side A Opening Statement\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"closing\", description: \"Side A Round 1 Closing\" },\n      { side: \"B\", type: \"closing\", description: \"Side B Round 1 Closing\" },\n    ],\n  },\n  {\n    roundNumber: 2,\n    title: \"Round 2\",\n    subrounds: [\n      { side: \"A\", type: \"opening\", description: \"Side A Opening Statement\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"closing\", description: \"Side A Round 2 Closing\" },\n      { side: \"B\", type: \"closing\", description: \"Side B Round 2 Closing\" },\n    ],\n  },\n  {\n    roundNumber: 3,\n    title: \"Round 3\",\n    subrounds: [\n      { side: \"A\", type: \"opening\", description: \"Side A Opening Statement\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"counter\", description: \"Side A Counter Response\" },\n      { side: \"B\", type: \"counter\", description: \"Side B Counter Response\" },\n      { side: \"A\", type: \"closing\", description: \"Side A Final Closing\" },\n      { side: \"B\", type: \"closing\", description: \"Side B Final Closing\" },\n    ],\n  },\n];\n\n/**\n * Generates contextual political commentary based on debate flow using AI\n */\nclass DialogueGenerator {\n  constructor(apiConfig = {}) {\n    this.debateHistory = [];\n    this.apiConfig = {\n      apiKey: apiConfig.apiKey || process.env.CEREBRAS_API_KEY,\n      model: apiConfig.model || \"qwen-3-235b-a22b-instruct-2507\",\n      maxTokens: apiConfig.maxTokens || 300, // Limit for ~150 words\n      temperature: apiConfig.temperature || 0.6,\n      topP: apiConfig.topP || 0.8,\n      stream: apiConfig.stream !== undefined ? apiConfig.stream : true,\n      ...apiConfig,\n    };\n\n    // Initialize Cerebras client\n    this.cerebras = new Cerebras({\n      apiKey: this.apiConfig.apiKey,\n    });\n  }\n\n  /**\n   * Call Cerebras LLM API to generate dialogue response\n   */\n  async callLLM(prompt, context = {}) {\n    if (!this.apiConfig.apiKey) {\n      console.warn(\"No Cerebras API key provided, using fallback response\");\n      return this.generateFallbackResponse(context);\n    }\n\n    try {\n      return await this.callCerebrasAPI(prompt, context);\n    } catch (error) {\n      console.error(\"Cerebras API Error:\", error.message);\n\n      // Provide specific error context\n      if (error.message.includes(\"Rate limit\")) {\n        console.error(\n          \"Consider implementing retry logic or reducing request frequency\"\n        );\n      } else if (error.message.includes(\"API key\")) {\n        console.error(\"Set your CEREBRAS_API_KEY environment variable\");\n      }\n\n      // Fallback to a basic response if API fails\n      return this.generateFallbackResponse(context);\n    }\n  }\n\n  /**\n   * Call Cerebras API with streaming support\n   */\n  async callCerebrasAPI(prompt, context = {}) {\n    const messages = [\n      {\n        role: \"system\",\n        content: SYSTEM_PROMPT,\n      },\n      {\n        role: \"user\",\n        content: prompt,\n      },\n    ];\n\n    try {\n      if (this.apiConfig.stream) {\n        // Use streaming response\n        const stream = await this.cerebras.chat.completions.create({\n          messages: messages,\n          model: this.apiConfig.model,\n          stream: true,\n          max_completion_tokens: this.apiConfig.maxTokens,\n          temperature: this.apiConfig.temperature,\n          top_p: this.apiConfig.topP,\n        });\n\n        let fullResponse = \"\";\n        for await (const chunk of stream) {\n          const content = chunk.choices[0]?.delta?.content || \"\";\n          fullResponse += content;\n        }\n\n        return fullResponse;\n      } else {\n        // Use non-streaming response\n        const response = await this.cerebras.chat.completions.create({\n          messages: messages,\n          model: this.apiConfig.model,\n          stream: false,\n          max_completion_tokens: this.apiConfig.maxTokens,\n          temperature: this.apiConfig.temperature,\n          top_p: this.apiConfig.topP,\n        });\n\n        return response.choices[0]?.message?.content || \"\";\n      }\n    } catch (error) {\n      if (error.status === 429) {\n        throw new Error(\"Rate limit exceeded. Please try again later.\");\n      } else if (error.status === 401 || error.status === 403) {\n        throw new Error(\"Invalid API key or insufficient permissions.\");\n      } else if (error.status === 400) {\n        throw new Error(`Invalid request: ${error.message}`);\n      } else {\n        throw new Error(`Cerebras API request failed: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Generate a simple fallback response without AI\n   */\n  generateFallbackResponse(context = {}) {\n    const { stance = \"support\", topic = \"this issue\" } = context;\n\n    // Simple fallback response\n    return `I ${stance} this position on ${topic}. This is an important issue that needs careful thought and respectful discussion between all people involved.`;\n  }\n\n  /**\n   * Generate a dialogue response for a specific subround using AI\n   */\n  async generateDialogue({\n    topic,\n    side,\n    subroundType,\n    previousArguments = [],\n    sideAName = \"Supporting\",\n    sideBName = \"Opposing\",\n  }) {\n    const isProponent = side === \"A\";\n    const speakerName = isProponent ? sideAName : sideBName;\n    const opponentName = isProponent ? sideBName : sideAName;\n    const stance = isProponent ? \"support\" : \"oppose\";\n    const position = isProponent ? \"in favor of\" : \"against\";\n\n    // Get the most recent opponent argument for direct response\n    const lastOpponentArgument = this.getLastOpponentArgument(\n      previousArguments,\n      side\n    );\n\n    // Build context for the prompt\n    const context = this.buildPromptContext({\n      topic,\n      stance,\n      position,\n      speakerName,\n      opponentName,\n      subroundType,\n      lastOpponentArgument,\n      previousArguments,\n      sideAName,\n      sideBName,\n    });\n\n    // Generate the dialogue using AI\n    const content = await this.callLLM(context.prompt, context);\n\n    return content;\n  }\n\n  /**\n   * Build comprehensive prompt context for AI generation\n   */\n  buildPromptContext({\n    topic,\n    stance,\n    position,\n    speakerName,\n    opponentName,\n    subroundType,\n    lastOpponentArgument,\n    previousArguments,\n    sideAName,\n    sideBName,\n  }) {\n    // Build debate history\n    let debateHistoryText = \"\";\n    if (previousArguments.length > 0) {\n      const recentArgs = previousArguments.slice(-2);\n      debateHistoryText = \"\\n\\nRecent discussion:\\n\";\n      recentArgs.forEach((arg) => {\n        const speaker = arg.side === \"A\" ? sideAName : sideBName;\n        debateHistoryText += `${speaker}: ${arg.content.substring(\n          0,\n          150\n        )}...\\n`;\n      });\n    }\n\n    // Build context about current position\n    let responseContext = \"\";\n    if (lastOpponentArgument) {\n      responseContext = `\\n\\nResponding to ${stance} the topic: \"${lastOpponentArgument.substring(\n        0,\n        200\n      )}...\"`;\n    }\n\n    // Define the specific task for this subround type\n    const taskInstructions = this.getTaskInstructions(subroundType);\n\n    // Build the complete prompt\n    const prompt = `${USER_PROMPT_TEMPLATE.replace(\"[TOPIC]\", topic)}\n\nYou are ${stance} the position on ${topic}. You are ${position} this issue.\n\nContext: ${taskInstructions}\n\n${debateHistoryText}${responseContext}\n\nGenerate a thoughtful, well-reasoned response that:\n1. Stays true to your assigned position (${stance})\n2. Addresses the specific task for this subround type\n3. Responds appropriately to previous arguments\n4. Maintains a respectful but firm debate tone\n5. Uses clear, accessible language that avoids complex jargon or overly academic terms\n6. Includes specific examples or analogies when helpful\n7. Ends with a challenging question for your opponent (except in final closing statements)\n8. Is concise and under 150 words\n9. Speaks in a way that educated adults can easily follow and understand\n\nYour response:`;\n\n    return {\n      prompt,\n      topic,\n      stance,\n      speakerName,\n      opponentName,\n      subroundType,\n    };\n  }\n\n  /**\n   * Get context-aware guidance for the subround type\n   * Only handles 3 types: opening, counter, closing\n   */\n  getTaskInstructions(subroundType) {\n    switch (subroundType) {\n      case \"opening\":\n        return \"This is your opening statement in the debate. Present your main arguments and set the foundation for your position.\";\n      case \"counter\":\n        return \"Respond to your opponent's perspective. Challenge their arguments, present evidence that contradicts their position, or offer alternative viewpoints.\";\n      case \"closing\":\n        return \"This is a concluding moment in the debate. Summarize your key points and make your final appeal.\";\n      default:\n        // Fallback for any unexpected types\n        return \"Continue the debate naturally\";\n    }\n  }\n  getLastOpponentArgument(previousArguments, currentSide) {\n    for (let i = previousArguments.length - 1; i >= 0; i--) {\n      const arg = previousArguments[i];\n      if (arg.side !== currentSide) {\n        return arg.content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Create an empty debate structure\n   */\n  static createEmptyDebate({\n    topic,\n    roundTopic1,\n    roundTopic2,\n    roundTopic3,\n    sideAName = \"Supporting\",\n    sideBName = \"Opposing\",\n  } = {}) {\n    const rounds = DEBATE_STRUCTURE.map((roundStructure, index) => {\n      const roundTopics = [roundTopic1, roundTopic2, roundTopic3];\n      const specificTopic =\n        roundTopics[index] && roundTopics[index].trim()\n          ? roundTopics[index]\n          : `${topic} - ${roundStructure.title}`;\n\n      // Use the specific round topic as the title if provided, otherwise use the default\n      const roundTitle =\n        roundTopics[index] && roundTopics[index].trim()\n          ? roundTopics[index]\n          : roundStructure.title;\n\n      return {\n        roundNumber: roundStructure.roundNumber,\n        title: roundTitle,\n        topic: specificTopic,\n        subrounds: roundStructure.subrounds.map(\n          (subroundStructure, subIndex) => ({\n            subroundNumber: subIndex + 1,\n            type: subroundStructure.type,\n            description: subroundStructure.description,\n            assignedSide: subroundStructure.side,\n            sides: {\n              A: {\n                speakerLabel: sideAName,\n                position: `${sideAName} (FOR)`,\n                text: \"\",\n                audioUrl: null,\n                isAssigned: subroundStructure.side === \"A\",\n              },\n              B: {\n                speakerLabel: sideBName,\n                position: `${sideBName} (AGAINST)`,\n                text: \"\",\n                audioUrl: null,\n                isAssigned: subroundStructure.side === \"B\",\n              },\n            },\n          })\n        ),\n      };\n    });\n\n    return {\n      debateId: `debate_${Date.now()}`,\n      topic,\n      roundTopic1,\n      roundTopic2,\n      roundTopic3,\n      sideAName,\n      sideBName,\n      rounds,\n    };\n  }\n}\n\nmodule.exports = {\n  DialogueGenerator,\n  DEBATE_STRUCTURE,\n  SYSTEM_PROMPT,\n  USER_PROMPT_TEMPLATE,\n};\n\n// Also export for ES6 compatibility\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.default = DialogueGenerator;\n}\n"],"names":["Cerebras","require","SYSTEM_PROMPT","USER_PROMPT_TEMPLATE","DEBATE_STRUCTURE","roundNumber","title","subrounds","side","type","description","DialogueGenerator","constructor","apiConfig","arguments","length","undefined","this","debateHistory","_objectSpread","apiKey","process","CEREBRAS_API_KEY","model","maxTokens","temperature","topP","stream","cerebras","callLLM","prompt","context","console","warn","generateFallbackResponse","callCerebrasAPI","error","message","includes","messages","role","content","chat","completions","create","max_completion_tokens","top_p","fullResponse","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","next","done","chunk","value","_chunk$choices$","_chunk$choices$$delta","choices","delta","err","return","_response$choices$","_response$choices$$me","status","Error","concat","stance","topic","generateDialogue","_ref","subroundType","previousArguments","sideAName","sideBName","isProponent","speakerName","opponentName","position","lastOpponentArgument","getLastOpponentArgument","buildPromptContext","_ref2","debateHistoryText","recentArgs","slice","forEach","arg","speaker","substring","responseContext","taskInstructions","getTaskInstructions","replace","currentSide","i","createEmptyDebate","roundTopic1","roundTopic2","roundTopic3","rounds","map","roundStructure","index","roundTopics","specificTopic","trim","roundTitle","subroundStructure","subIndex","subroundNumber","assignedSide","sides","A","speakerLabel","text","audioUrl","isAssigned","B","debateId","Date","now","module","exports","default"],"sourceRoot":""}